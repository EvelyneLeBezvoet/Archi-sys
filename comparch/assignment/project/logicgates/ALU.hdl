
/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put your code here:
	UnaryALU(x=x,z=zx,n=nx,out=outx);
	UnaryALU(x=y,z=zy,n=ny,out=outy);
	And16(a=outx,b=outy,out=outand);
	And16(a=outx,b=true,out[0..3]=outx1,out[4..7]=outx2,out[8..11]=outx3,out[12..15]=outx4);
	And16(a=outy,b=true,out[0..3]=outy1,out[4..7]=outy2,out[8..11]=outy3,out[12..15]=outy4);
	CarryLookahead4(a=outx1,b=outy1,cin = false, out = out1,cout=c1);
	CarryLookahead4(a=outx2,b=outy2,cin = c1, out = out2,cout=c2);
	CarryLookahead4(a=outx3,b=outy3,cin = c2, out = out3,cout=c3);
	CarryLookahead4(a=outx4,b=outy4,cin = c3, out = out4,cout=c4);
	
	And16(a[0..3] = out1,a[4..7] = out2,a[8..11]=out3,a[12..15]=out4,b=true,out=outsol);
	Mux16(a=outand,b=outsol,sel=f,out=outter);
	Not16(in=outter,out=outnot);	
	Mux16(a=outter,b=outnot,sel=no,out=out25);
	And16(a=out25,b=true,out=out);
	Or16Way(in=out25,out=outor);
	Mux(a=true,b=false,sel=outor,out=zr);
	And16(a=out25,b=true,out[0..14]=blup,out[15]=sigmoins);
	And(a= true,b=sigmoins,out= ng); 
        
}